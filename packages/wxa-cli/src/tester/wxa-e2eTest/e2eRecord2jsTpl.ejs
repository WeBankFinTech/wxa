/* eslint-disable no-console */
/* eslint-disable no-undef */
import automator from 'miniprogram-automator';
import path from 'path';
import fs from 'fs';

const apiMockMap = require(`./api.json`);

let miniProgram;
let page;
const sleep = t => new Promise(resolve => setTimeout(resolve, t));

// 截图目录
let timeStamp = new Date();
function num2Str(num) {
    if (num >= 10) {
        return `${num}`;
    }
    return `0${num}`
}
timeStamp = `${timeStamp.getFullYear()}-${num2Str(timeStamp.getMonth()+1)}-${num2Str(timeStamp.getDate()+1)} ${num2Str(timeStamp.getHours())}:${num2Str(timeStamp.getMinutes())}:${num2Str(timeStamp.getSeconds())}`;
let count = 0;
fs.mkdirSync(path.join(__dirname, timeStamp))

beforeAll(async () => {
    jest.setTimeout(300000);
    miniProgram = await automator.launch({
        cliPath: '<%= cliPath %>',
        projectPath: path.resolve(process.cwd(), './dist/')
    });

    page = await miniProgram.currentPage();
}, 300000);

afterAll(async () => {
    if (miniProgram) await miniProgram.close();
});

describe('==== <%= name %> ====', () => {

    test('<%= name %>', async () => {
        await miniProgram.mockWxMethod(
            'request',
            function(reqObj, apiMockMap) {
                let mapKey = `${reqObj.url}__e2e__${reqObj.method}__e2e__${Object.keys(reqObj.data).join(',')}`;
                if (apiMockMap[mapKey] && apiMockMap[mapKey].length > 0) {
                    console.log(reqObj.url, 'mock success')
                    return apiMockMap[mapKey].shift();
                }
                return new Promise(resolve => {
                    reqObj.success = res => resolve(res)
                    reqObj.fail = res => resolve(res)
                    // origin 指向原始方法
                    console.log(reqObj.url, 'no mock')
                    this.origin(reqObj)
                })
            },
            apiMockMap
        )
        page = await miniProgram.reLaunch("/<%= record[0].page%>");
        let element;
        await page.waitFor(300);

        <% record.forEach(function(item){ %>
            while (true) {
                page = await miniProgram.currentPage()
                if (page.path === '<%= item.page %>') {
                    break;
                }
                await sleep(1000);
            }

            await page.waitFor('.<%= item.id %>');
            element = await page.$('.<%= item.id %>')
            miniProgram.screenshot({path: path.join(__dirname, timeStamp, `${++count}.png`)})

            <% if (!!~['tap', 'longpress'].indexOf(item.event)) { %>
            await element.<%= item.event%>();
            <% } else if (!!~['input'].indexOf(item.event)) { %>
                await element.<%= item.event%>("<%= item.detail.value %>");
            <% } else if (!!~['touchstart', 'touchmove', 'touchend'].indexOf(item.event)) { %>
                await element.<%= item.event%>({
                    touches: <%-JSON.stringify(item.touches)%>,
                    changedTouches: <%-JSON.stringify(item.changedTouches)%>
                });
            <% } else { %>
            await element.trigger('<%=item.event%>', <%-JSON.stringify(item.detail)%>);
            <% } %>
            await page.waitFor(300)
        <% }); %>
        miniProgram.screenshot({path: path.join(__dirname, timeStamp, `${++count}.png`)})
    });
});
